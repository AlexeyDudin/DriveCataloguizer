// <auto-generated />
using DriveCataloguizerInfrastructure.StorageControl;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DriveCataloguizerInfrastructure.Migrations
{
    [DbContext(typeof(EfContext))]
    [Migration("20250130202813_AddPathToDirectory")]
    partial class AddPathToDirectory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.36");

            modelBuilder.Entity("DriveCataloguizerModel.Models.CatalogueInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Capacity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("capacity");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT")
                        .HasColumnName("number");

                    b.HasKey("Id");

                    b.ToTable("CatalogueInformation");
                });

            modelBuilder.Entity("DriveCataloguizerModel.Models.CatalogueToDriveInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CatalogueId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DriveId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DrivePosition")
                        .HasColumnType("INTEGER")
                        .HasColumnName("drive_position");

                    b.HasKey("Id");

                    b.HasIndex("CatalogueId");

                    b.HasIndex("DriveId")
                        .IsUnique();

                    b.ToTable("CatalogueToDriveInformation");
                });

            modelBuilder.Entity("DriveCataloguizerModel.Models.DriveInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DriveStatus")
                        .HasColumnType("INTEGER")
                        .HasColumnName("drive_status");

                    b.Property<int>("DriveType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("drive_type");

                    b.Property<string>("MainNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("number");

                    b.Property<string>("PathToDirectory")
                        .HasColumnType("TEXT")
                        .HasColumnName("path_to_directory");

                    b.Property<string>("SecondNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("second_number");

                    b.HasKey("Id");

                    b.ToTable("DriveInformation");
                });

            modelBuilder.Entity("DriveCataloguizerModel.Models.CatalogueToDriveInformation", b =>
                {
                    b.HasOne("DriveCataloguizerModel.Models.CatalogueInformation", "Catalogue")
                        .WithMany("Drives")
                        .HasForeignKey("CatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriveCataloguizerModel.Models.DriveInformation", "Drive")
                        .WithOne("CatalogueToDrive")
                        .HasForeignKey("DriveCataloguizerModel.Models.CatalogueToDriveInformation", "DriveId");

                    b.Navigation("Catalogue");

                    b.Navigation("Drive");
                });

            modelBuilder.Entity("DriveCataloguizerModel.Models.CatalogueInformation", b =>
                {
                    b.Navigation("Drives");
                });

            modelBuilder.Entity("DriveCataloguizerModel.Models.DriveInformation", b =>
                {
                    b.Navigation("CatalogueToDrive");
                });
#pragma warning restore 612, 618
        }
    }
}
